class Archmage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Archmage ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 4 , 7 , spell_damage = 1 )
class Booty Bay Bodyguard Bodyguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Booty Bay Bodyguard ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 5 , 4 , taunt = True )
class Darkscale Healer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Darkscale Healer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 5 )
class Fiery War Axe ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Fiery War Axe ` , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) def create_weapon ( self , player ) : return Weapon ( 3 , 2 )
class Frostwolf Warlord ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Frostwolf Warlord ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Minion Hason ( ) , Both Player ( ) ) ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( Minion Hason ( ) , Both Player ( ) ) ) ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 4 )
class Hellfire ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hellfire ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 3 ) , self )
class Innervate ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Innervate ` , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Change Health ( 2 ) , Weapon Selector ( ) , Turn Ended ( ) ) ) player . draw ( )
class Magma Rager ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Magma Rager ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) def create_minion ( self , player ) : return Minion ( 5 , 1 )
class Mortal Coil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mortal Coil ` , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . silence ( )
class Polymorph ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Polymorph ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . check_delayed ( )
class Searing Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Searing Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 1 , 1 )
class Silverback Patriarch ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Silverback Patriarch ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 1 , 4 , taunt = True )
class Stormwind Knight ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Stormwind Knight ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 5 , charge = True )
class Voodoo Doctor ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voodoo Doctor ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 2 , 1 )
class Wrath Of Air Totem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wrath of Air Totem ` , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 0 , 2 , spell_damage = 1 )
class Astral Communion Communion ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Astral Communion ` , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) if player . max_mana < 10 : player . max_mana + = 1
class Annoy - o - Tron ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Annoy - o - Tron ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 1 , 2 , divine_shield = True , taunt = False )
class Burly Rockjaw Trogg ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Burly Rockjaw Trogg ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Cogmaster Wrench Wrench ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gallywix ` s Wrench Wrench ` , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) def create_weapon ( self , player ) : return Weapon ( 1 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) ) ] )
class Echoof Medivh ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Echo of Medivh ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) def use ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7 def use ( self , player , game ) : super ( ) . use ( player , game ) for target in copy . copy ( player . minions ) : minion_card . add_buff ( Buff ( Mana Change ( - 3 ) ) )
class Floating Watcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Floating Watcher ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )
class Gnomish Experimenter ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnomish Experimenter ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 2 )
class Iron Juggernaut ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Iron Juggernaut ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Transform ( 10Bot ( ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 5 )
class Madder Bomber ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Madder Bomber ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 4 )
class Mini - Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mini - Mage ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) def create_minion ( self , player ) : return Minion ( 4 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )
class Piloted Sky Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Piloted Sky Golem ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) def create_minion ( self , player ) : return Minion ( 6 , 6 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) )
class Scarlet Purifier ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Scarlet Purifier ` , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )
class Siltfin Spiritwalker ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siltfin Spiritwalker ` , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , minion_type = MINION_TYPE . TOTEM ) def create_minion ( self , player ) : return Minion ( 2 , 5 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . TOTEM ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Tinkertown Technician ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Tinkertown Technician ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) , None ( Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 3 )
class Vol ` jin ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Vol ` jin ` , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( ` health ` , ` attack ` , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 6 , 2 )
class ` s Bite ( Weapon Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gallywix ` s Bite ` , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) def create_weapon ( self , player ) : return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )
class Maexxna ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Maexxna ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) def create_minion ( self , player ) : return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )
class Sludge Belcher ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Sludge Belcher ` , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 3 , 5 , divine_shield = True , taunt = False )
class Voidcaller ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Voidcaller ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 3 , 4 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )
class Alexstrasza ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Alexstrasza ` , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Replace ( 15Bot ( ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 8 , 8 )
class Arcane Golem ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Arcane Golem ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Add Card ( Mana Crystal ( ) , 2 ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 2 , taunt = True )
class Baine Bloodhoof ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Baine Bloodhoof ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) def create_minion ( self , player ) : return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )
class Blade Flurry ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Blade Flurry ` , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . append ( game . other_player . hero )
class Brawl ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Brawl ` , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) def use ( self , player , game ) : super ( ) . use ( player , game ) targets = copy . copy ( game . other_player . minions ) targets . extend ( player . minions ) for minion in targets : minion . die ( self )
class Conceal ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Conceal ` , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )
class Defender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Defender ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , False ) def create_minion ( self , p ) : return Minion ( 2 , 1 )
class Doomguard ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Doomguard ` , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Equip ( Whelp ( ) , True ) , Player Selector ( players = Both Player ( ) ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 7 , charge = True )
class Earth Elemental ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Earth Elemental ` , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 2 ) def create_minion ( self , player ) : return Minion ( 7 , 8 , taunt = True )
class Explosive Trap ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Explosive Trap ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) def activate ( self , player ) : player . bind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` minion_played Damage ` , self . _reveal )
class Flame Of Azzinoth ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Flame of Azzinoth ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )
class Gnoll ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Gnoll ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 2 , taunt = True )
class Holy Wrath ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Holy Wrath ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) for minion in player . minions : minion . add_buff ( Buff ( Frozen ( ) ) )
class Infernal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Infernal ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) def create_minion ( self , player ) : return Minion ( 6 , 6 )
class Kirin Tor Mage ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Kirin Tor Mage ` , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 4 , 3 )
class Lightwarden ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Lightwarden ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Mana Wraith ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Mana Wraith ` , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) def create_minion ( self , player ) : return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )
class Misdirection ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Misdirection ` , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) super ( ) . reveal ( ) player . hero . change_temp_attack ( 4 )
class Noble Sacrifice ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Noble Sacrifice ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def activate ( self , player ) : player . game . current_player . bind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal ) def deactivate ( self , player ) : player . game . current_player . unbind ( ` character_attack ` , self . _reveal )
class Power Ofthe ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Power of the Wild ` , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . add_buff ( Buff ( Change Attack ( 1 ) ) ) self . target . add_buff ( Buff ( Change Health ( 1 ) ) )
class Redemption ( Secret Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Redemption ` , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) def use ( self , player , target ) : super ( ) . use ( player , game )
class Shadow Madness ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Shadow Madness ` , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game ) from hearthbreaker . cards . minions . druid import 3Treant super ( ) . use ( player , game ) def _reveal ( self , player , game ) : return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Siphon Soul ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Siphon Soul ` , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) > = 3 and target . spell_targetable ( ) ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . die ( self )
class Spellbender ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Spellbender ` , 0 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , False ) def create_minion ( self , player ) : return Minion ( 1 , 3 )
class Summoning Portal ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Summoning Portal ` , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 0 , 4 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )
class Thrallmar Farseer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Thrallmar Farseer ` , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) def create_minion ( self , player ) : return Minion ( 2 , 3 , windfury = True )
class Upgrade ! ! ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Upgrade ! ` , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) def use ( self , player , game ) : super ( ) . use ( player , game )
class Wisp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Wisp ` , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . COMMON ) def create_minion ( self , player ) : return Minion ( 1 , 1 )
class Black Whelp ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Black Whelp ` , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 2 , 1 )
class Dragonkin Sorcerer ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Dragonkin Sorcerer ` , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) def create_minion ( self , player ) : return Minion ( 3 , 5 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )
class Hungry Dragon ( Minion Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Hungry Dragon ` , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Hungry Dragon ( ) ) , Player Selector ( ) ) ) def create_minion ( self , player ) : return Minion ( 5 , 6 )
class Solemn Vigil Vigil ( Spell Card ) : def __init__ ( self ) : super ( ) . __init__ ( ` Solemn Vigil ` , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) def use ( self , player , game ) : super ( ) . use ( player , game ) self . target . damage ( player . effective_spell_damage ( 1 ) , self )
